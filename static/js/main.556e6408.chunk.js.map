{"version":3,"sources":["reportWebVitals.ts","components/GameState.tsx","components/GameStyled.tsx","components/Game.tsx","index.tsx"],"names":["reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","calculateWinner","boardState","board","winningCombination","i","length","a","b","c","filter","Main","styled","div","Row","props","gap","Column","StyledSquare","button","Button","Board","onClick","createProps","square","value","Log","startNew","Square","Game","useState","history","Array","fill","step","gameState","setGameState","current","xIsNext","winner","handleClick","slice","newBoardState","push","useGameState","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.556e6408.chunk.js","sourcesContent":["import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import {useState} from \"react\";\n\nexport type Value = 'X' | 'O' | null;\nexport type BoardState = Value[];\nexport type GameState = {\n    history: BoardState[],\n    step: number\n};\n\nconst createBoardState = () => Array<Value>(9).fill(null);\nconst isBoardFull = (board: BoardState) => board.filter(b => !b);\n\nconst calculateWinner = (boardState: BoardState) => {\n    const  winningCombination = [\n        [0, 1, 2],\n        [3, 4, 5],\n        [6, 7, 8],\n        [0, 3, 6],\n        [1, 4, 7],\n        [2, 5, 8],\n        [0, 4, 8],\n        [2, 4, 6]\n    ];\n\n    for (let i = 0; i < winningCombination.length; i++) {\n        const [a, b, c] = winningCombination[i];\n        if(boardState[a] && boardState[a] === boardState[b] && boardState[a] === boardState[c]) return boardState[a];\n    }\n\n    if(isBoardFull(boardState).length == 0) return 'Нічия';\n\n    return  null;\n};\n\nexport const useGameState = () => {\n    const [gameState, setGameState] = useState<GameState>({\n        history: [createBoardState()],\n        step: 0,\n    });\n\n    const current = gameState.history[gameState.step];\n    const xIsNext= (gameState.step % 2) === 0;\n    const winner = calculateWinner(current);\n\n    const  handleClick = (square: number) => {\n        const history = gameState.history.slice(0, gameState.step + 1);\n        const boardState = history[history.length - 1];\n        if(calculateWinner(boardState) || boardState[square]) return;\n        const newBoardState = boardState.slice();\n        newBoardState[square] = xIsNext ? 'X' : 'O';\n        history.push(newBoardState);\n        setGameState({\n            history: history,\n            step: history.length - 1,\n        });\n    }\n    const startNew = () => {\n        setGameState({\n            history: gameState.history,\n            step: 0\n        });\n    }\n\n    return {\n        current,\n        xIsNext,\n        winner,\n        handleClick,\n        startNew\n    };\n}","import styled from \"styled-components\";\nimport {LayoutProps} from \"./Game\";\n\nexport const Main = styled.div`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  flex-direction: column;\n  text-align: center;\n`;\n\nexport const Row = styled.div<LayoutProps>`\n  display: flex;\n  flex-direction: row;\n  gap: ${(props => props.gap)}px;\n`;\n\nexport const Column = styled.div<LayoutProps>`\n  display: flex;\n  flex-direction: column;\n  gap: ${(props => props.gap)}px;\n`;\n\nexport const StyledSquare = styled.button`\n  width: 70px;\n  height: 70px;\n  background: #fff;\n  border: 1px solid #FAF0CA;\n  padding: 0;\n  font-size: 50px;\n  color: #000;\n`;\n\nexport const Button = styled.button`\n  border: none;\n  padding: 5px 10px;\n  font-size: 24px;\n  color: #000;\n  margin-top: 50px;\n  background: #FAF0CA;\n`;","import * as React from 'react';\nimport {BoardState, useGameState, Value} from \"./GameState\";\nimport {Button, Column, Main, Row, StyledSquare} from \"./GameStyled\";\n\nexport type LayoutProps = {\n    gap: number\n}\n\ntype BoardProps = {\n    board: BoardState,\n    onClick: (square: number) => void\n}\n\ntype SquareProps = {\n    value: Value,\n    onClick: () => void\n}\n\ntype LogProps = {\n    startNew: () => void\n}\n\n\nconst Board = ({board, onClick}: BoardProps) => {\n    const createProps = (square: number): SquareProps => {\n        return {\n            value: board[square],\n            onClick: () => onClick(square)\n        }\n    };\n    return (\n        <Column gap={0}>\n            <Row gap={0}>\n                <Square {...createProps(0)} />\n                <Square {...createProps(1)} />\n                <Square {...createProps(2)} />\n            </Row>\n            <Row gap={0}>\n                <Square {...createProps(3)} />\n                <Square {...createProps(4)} />\n                <Square {...createProps(5)} />\n            </Row>\n            <Row gap={0}>\n                <Square {...createProps(6)} />\n                <Square {...createProps(7)} />\n                <Square {...createProps(8)} />\n            </Row>\n        </Column>\n    )\n}\n\nconst Log = ({startNew}: LogProps) => <Button onClick={startNew}> Почати нову гру </Button>;\n\nconst Square = ({onClick, value}: SquareProps) => <StyledSquare onClick={onClick}>{value}</StyledSquare>\n\nexport const Game = () => {\n\n    const {\n        current,\n        xIsNext,\n        winner,\n        handleClick,\n        startNew\n    } = useGameState();\n\n    return (\n        <Main>\n            <Row gap={20}>\n                <Column gap={20}>\n                    <div>{winner ?  (winner.length > 1) ? 'Нічия' :`Переміг ${winner}` : `Хід гравця ${xIsNext ? 'X' : 'O'}` }</div>\n                    <Board board={current} onClick={handleClick} />\n                </Column>\n\n            </Row>\n            <Log startNew={startNew} />\n        </Main>\n    );\n}\n\n\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport reportWebVitals from './reportWebVitals';\nimport {Game} from \"./components/Game\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <Game />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}